import numpy as np
import nibabel as nib
from pathlib import Path
import SimpleITK as sitk
import json
import pandas as pd
from scipy.ndimage import label
from collections import Counter


def min_max_value(folder_path):
    min_val = 0.0
    max_val = 0.0

    files = list(folder_path.glob("*.nii.gz"))
    for file in files:

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = nib.load(file)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ numpy-–º–∞—Å—Å–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        data = img.get_fdata()

        # # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # image = sitk.ReadImage(file)
        #
        # # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ numpy-–º–∞—Å—Å–∏–≤
        # data = sitk.GetArrayFromImage(image)  # (Z, Y, X)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ –∏ –º–∞–∫—Å–∏–º—É–º–∞
        if np.min(data) < min_val:
            min_val = np.min(data)
        if np.max(data) > max_val:
            max_val = np.max(data)

    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏: {min_val}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏: {max_val}")


def _extract_image_info(nii_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ .nii/.nii.gz —Ñ–∞–π–ª–∞"""
    image = sitk.ReadImage(str(nii_path))
    size = image.GetSize()
    spacing = image.GetSpacing()
    origin = image.GetOrigin()

    info = {
        "filename": nii_path.name,
        "shape": tuple(reversed(size)),       # (Z, Y, X)
        "spacing": spacing,                   # (X, Y, Z)
        "origin": origin,                     # (X, Y, Z)
        "direction": image.GetDirection(),    # 3x3 flattened
        "pixel_type": sitk.GetPixelIDValueAsString(image.GetPixelID())
    }
    return info


def check_single_connected_component(nii_path, connectivity=1):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞ –∏–∑ .nii-—Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å–≤—è–∑–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.

    Parameters:
        nii_path (str or Path): –ø—É—Ç—å –∫ NIfTI-—Ñ–∞–π–ª—É.
        connectivity (int): —Å–≤—è–∑–Ω–æ—Å—Ç—å (1 = 6-—Å–≤—è–∑–Ω–æ—Å—Ç—å, 2 = 18, 3 = 26 –¥–ª—è 3D).

    Returns:
        bool: True, –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å–≤—è–∑–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞; False ‚Äî –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –∏–ª–∏ –º–∞—Å–∫–∞ –ø—É—Å—Ç–∞.
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å–∫–∏
    image = sitk.ReadImage(str(nii_path))
    mask = sitk.GetArrayFromImage(image)  # (z, y, x)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞
    mask = (mask > 0).astype(np.uint8)

    # –°–≤—è–∑–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
    labeled, num_features = label(mask, structure=np.ones((3, 3, 3)) if connectivity == 3 else None)

    # –ü–æ–¥—Å—á—ë—Ç –≤–æ–∫—Å–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω ‚Äî –º–µ—Ç–∫–∞ 0)
    voxel_counts = Counter(labeled.flat)
    if 0 in voxel_counts:
        del voxel_counts[0]

    if not num_features == 1:
        print(f"–§–∞–π–ª: {nii_path}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {num_features}")
        for label_id, count in voxel_counts.items():
            print(f" - –û–±–ª–∞—Å—Ç—å {label_id}: {count} –≤–æ–∫—Å–µ–ª–µ–π")
    else:
        print(f"–§–∞–π–ª: {nii_path}      OK!")



def check_files_in_folder(check_folder, result_folder, info_type=True):
    nii_files = list(check_folder.rglob("*.nii")) + list(check_folder.rglob("*.nii.gz"))

    if info_type:
        info_list = []

        for nii_file in nii_files:
            info = _extract_image_info(nii_file)
            info_list.append(info)

        df = pd.DataFrame(info_list)
        csv_path = result_folder / f"{check_folder.name}_image_info.csv"
        df.to_csv(csv_path, index=False)

        # üîç –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É
        unique_info = {
            col: sorted(df[col].dropna().unique().tolist())
            for col in df.columns
            if col not in ['filename']
        }

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–º —Ç–∏–ø–∞–º
        def convert(o):
            if isinstance(o, tuple):
                return list(o)
            if isinstance(o, Path):
                return str(o)
            return o

        json_path = result_folder / f"{check_folder.name}_image_info_summary.json"
        with open(json_path, 'w') as f:
            json.dump(unique_info, f, indent=4, default=convert)
    else:
        for nii_file in nii_files:
            check_single_connected_component(nii_file)


if __name__ == "__main__":
    data_path = "C:/Users/Kamil/Aortic_valve/data/"
    # check_folder = Path(data_path) / "nii_resample"
    result_folder = Path(data_path) / "temp" / "temp_check_info_nii"
    check_folder = Path(data_path) / "mask_aorta_segment"
    # min_max_value(check_folder)
    check_files_in_folder(check_folder, result_folder, info_type=False)